import os
import sys
import yaml
from PyQt5.QtWidgets import QApplication, QMainWindow
from ui_example import Ui_MainWindow  # 这里假设生成的文件名为 ui_example.py

class YamlEditor(QMainWindow, Ui_MainWindow):
    def __init__(self, directory):
        super(YamlEditor, self).__init__()
        self.setupUi(self)
        self.directory = directory
        self.data_dict = {}

        # 这里假设你的QTextEdit控件在UI中分别命名为 textEdit_param1, textEdit_param2 ...
        self.text_edits = {
            "param1": self.textEdit_param1,
            "param2": self.textEdit_param2,
            # 根据需要继续添加其他映射
        }

        self.load_yaml_files()
        self.connect_signals()

    def load_yaml_files(self):
        for filename in os.listdir(self.directory):
            if filename.endswith(".yaml") or filename.endswith(".yml"):
                file_path = os.path.join(self.directory, filename)
                with open(file_path, 'r') as file:
                    try:
                        data = yaml.safe_load(file) or {}
                        self.data_dict[file_path] = data
                        self.map_to_widgets(data)
                    except yaml.YAMLError as exc:
                        print(f"Error loading {file_path}: {exc}")

    def map_to_widgets(self, data):
        for param_name, text_edit in self.text_edits.items():
            if param_name in data:
                text_edit.setPlainText(str(data[param_name]))

    def connect_signals(self):
        for param_name, text_edit in self.text_edits.items():
            text_edit.textChanged.connect(lambda _, pname=param_name: self.on_text_changed(pname))

    def on_text_changed(self, param_name):
        new_value = self.text_edits[param_name].toPlainText()
        for file_path, data in self.data_dict.items():
            if param_name in data:
                self.data_dict[file_path][param_name] = new_value
                with open(file_path, 'w') as file:
                    try:
                        yaml.dump(self.data_dict[file_path], file, default_flow_style=False)
                    except yaml.YAMLError as exc:
                        print(f"Error writing to {file_path}: {exc}")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    directory = '/path/to/your/yaml/files'  # 指定你的 YAML 文件目录
    editor = YamlEditor(directory)
    editor.show()
    sys.exit(app.exec_())
